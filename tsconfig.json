// TypeScript编译选项 link: https://www.tslang.cn/docs/handbook/compiler-options.html
{
  "compilerOptions": {
    // "outDir": "fileName", // 将include指定目录下编译的文件输出到哪个目录中，如果不指定将输出到编译文件的当前目录中。
    "target": "es5", // 指定"module": "esnext"做转换处理后】的ECMAScript目标版本 "ES3"（默认）
    "lib": [ // 编译过程中需要引入的库文件的列表
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": false, // 是否编译JS文件。
    "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查。
    "esModuleInterop": true, // 当module字段为esnext时就需要设置它，该字段是将CommonJS规范转换成ES6规范
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入,这并不影响代码的输出，仅为了类型检查。
    "strict": true, // 开启严格模式
    "forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的引用。
    "noFallthroughCasesInSwitch": true, // 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
    "module": "esnext", // 一个可以将ES6及更高的版本转换成ES5的库,
    "moduleResolution": "node", // 决定如何处理模块
    "resolveJsonModule": true, // 允许从 .json 中导入、导出其类型
    "isolatedModules": true, // 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
    "noEmit": true, // 是否编译输出文件。
    "jsx": "react-jsx" // 在 .tsx文件里支持JSX： "React"或 "Preserve"。查看 JSX。
  }, 
  // 排除编译目标文件
  "exclude": [
    "node_modules"
  ],
  /*
     指定编译目标文件
  */
  "include": [ 
    "src"
  ]
}
